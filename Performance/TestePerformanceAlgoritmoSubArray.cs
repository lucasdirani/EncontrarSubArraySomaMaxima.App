using BenchmarkDotNet.Attributes;
using EncontrarSubArraySomaMaxima.App.Algoritmos;

namespace EncontrarSubArraySomaMaxima.App.Performance
{
    [MemoryDiagnoser]
    [RankColumn]
    public class TestePerformanceAlgoritmoSubArray
    {
        [Params(
            new int[] { -45, 76, -22, 22, 90, -20, 4, 50, 85, -20 },
            new int[] { -9, 3, 33, 16, 27, -11, -33, 52, 52, 21, -17, 50, -2, 40, 4, 74, 75, 12, 53, 45, -37, -50, 5, 13, 68, 7, 34, -17, 84, -7, 55, 47, -29, 62, 79, -29, 15, 66, -47, -32, -39, 3, -23, -49, 79, 97, 14, -3, 81, 3 },
            new int[] { 44, 41, -36, 45, 95, 43, 36, 77, 9, 66, 91, 40, -34, -28, 64, 18, -36, 51, 85, 46, 9, 100, 62, 60, 5, 53, 41, -35, 6, 42, 68, 90, 6, 41, 27, 70, 44, -4, -9, 7, 67, 54, -23, 19, 13, 85, -28, 9, 98, -17, -2, 83, 15, 54, 87, 34, -9, 16, -29, 23, -38, 17, 2, 35, -10, -41, 92, 1, 18, -18, 45, 93, 86, 32, 87, 6, 3, 54, 48, -2, -17, 92, -21, 22, 15, 71, 47, -2, 28, -22, -43, 55, -36, -20, -17, 27, -9, 48, 20, 36 },
            new int[] { -7, 96, 24, 42, 54, 70, 99, 1, -13, -32, 70, -33, 42, 84, 72, -22, 79, -49, 30, -30, 94, 64, 14, 91, 5, 86, -1, 84, 50, 4, 11, 5, 18, -35, -14, -42, 76, -48, 69, 78, -19, 75, 20, 25, 36, 57, -3, -22, 1, 51, 9, -2, 82, -21, 12, 8, 57, 48, 61, 76, 82, -15, -49, 37, -32, 18, 76, -8, 57, 85, -39, 13, -42, 92, 49, -47, -45, -41, -44, -4, 37, -43, -18, 76, -7, 60, 44, -18, -35, 40, -26, -3, -8, -26, -41, -45, -24, 26, 56, 38, -40, 51, 91, 51, -19, -9, -34, 87, 80, -6, -1, 63, 95, 33, -42, -22, 98, 32, 10, -25, 83, -3, 52, 0, 45, 10, 82, -30, -34, 98, 65, 98, -40, 37, 80, -26, -13, 15, 46, 28, 79, 11, -50, 7, -35, 40, -23, 45, 19, 84, 53, -47, 82, 23, 99, 59, 50, -39, -33, 18, 70, -31, 99, 7, 84, 72, -24, 8, 15, 54, 55, 94, 2, 99, 9, 21, 36, 87, -26, -8, 13, 83, -41, 43, 16, 97, -40, 28, 46, 86, 94, 68, 95, -47, 69, 5, 67, 100, 42, 95, 73, 17, 78, 13, -48, 92, 60, 5, 89, 80, -4, 87, 85, 33, 69, 1, -6, 100, 82, 97, 88, 72, -49, 98, 96, -12, 91, 52, -43, 31, -35, 37, -9, -6, -19, 7, -38, -32, 40, -32, -39, 83, -45, 27, 43, 99, 71, 56, 32, -49, 24, 37, 91, 41, -34, 90, 84, -15, -1, 60, 95, -9, 20, 78, 21, 24, -20, 41, 25, 67, -1, 94, -25, 89, 89, 45, -30, 38, -29, 93, 35, 8, -12, 84, 90, 74, 24, 3, 93, 63, 12, 4, -25, -44, 32, -48, 45, 43, 64, -15, 2, 88, 23, 37, 57, -21, -7, 31, -15, 10, -27, -40, -26, 39, -16, -14, 95, -27, 33, 1, -2, 33, -42, 19, 43, 59, 34, 51, -29, 37, 73, 69, -23, 95, 22, 93, -31, 97, -19, -37, 69, 71, 23, 68, 53, -7, 74, -11, -19, -12, -16, -11, -36, 29, -41, 58, 78, 57, -29, 2, -1, 37, -34, 32, 18, -11, 3, -32, -50, 84, 76, 30, -12, 51, 32, 9, 48, 86, -8, -16, 25, 51, 95, 37, 99, 78, 96, 17, -7, 69, -16, 22, -17, 58, 36, 85, -38, 45, -11, -43, -36, -43, 24, 36, 46, -48, -11, 99, 100, 71, 25, -29, -4, -48, 20, 60, 11, 67, 87, 93, -29, 54, 66, -30, -18, -32, 40, 82, 3, 40, -19, 15, 83, 86, 41, -26, -5, 20, -8, -2, 50, -44, 42, 83, 38, 18, 29, 27, -45, -48, -47, 68, 100, -30, 23, 47, 25, 36, -21, -20, 78, -38, 16, 16, -46, -50, 40, 49, 37, 41, 91, -35, -41, 56, 75, 60, 9, 10, 26, -14, 7, -36, 19, 62, 33, -27, -14, 79, -23, -42, -15, 31, 84, 19, 32, 60, 5, -32, -10, 13 })]
        public int[] Array { get; set; }

        [Benchmark]
        public void MedirPerformanceEncontrarSubArrayDeSomaMaximaEmComplexidadeQuadratica()
        {
            AlgoritmoSubArray.EncontrarSubArrayDeSomaMaximaEmComplexidadeQuadratica(Array, Array.Length);
        }

        [Benchmark]
        public void MedirPerformanceEncontrarSubArrayDeSomaMaximaEmComplexidadeLinear()
        {
            AlgoritmoSubArray.EncontrarSubArrayDeSomaMaximaEmComplexidadeLinear(Array, Array.Length);
        }
    }
}